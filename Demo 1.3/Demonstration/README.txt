ASP.NET Introduction

-Cody Pugliese

I'm not 100% positive as to how much you guys know about asp.net, so I figured I would start at the basics. 
Visual Studio is basically the same as it was in CIS 340 and 345, so I won't go very in depth into that.

I will be covering asp.net web forms. I haven't had the chance to learn MVC, but it is FAR DIFFERENT so I would
be cautious of taking it on with no experience in it. By knowing c# windows forms apps, you have a big advantage
using web forms as opposed to MVC. It will probably be much easier on you.

You are looking at an Empty Web Application project. I added a new Web Form: Default.aspx. In ASP.Net, this is the
equivalent of index.html: the page launched by the IIS Web Server if a user navigates to a virtual directory.
A Web Form is essentially a web page. It is made up of 3 files: a .aspx file, a .aspx.cs file, and a .aspx.designer.cs
file. The only two you will be concerned with are the .aspx and aspx.cs files. Like in a Windows Forms application, 
which we leaned about a little in CIS 345, the designer file is generated by the application.

The aspx.cs file is the 'Code Behind' file, similar to that of a Windows Form in a Windows Forms application. The
Default.aspx file contains html and asp code. Like php, asp code is processed by the server before the page is
served to the client. Therefore, any of the elements you use are processed into standard html before the client ever
sees them. You can see the resulting html by hitting F12 in a browser while viewing this page. 

The main difference between asp.net and php is that the feel of developing an asp.net application is very similar to 
that of a windows forms app. You can add 'Controls', which have events in the code behind file, and can alter these 
controls in c# code. For example:

	Say you declare an asp Textbox. This control translated into html is:		<input type="Text"></input>

	-----------------------------------------------------------------------------------
	DECLARING AN ASP.NET ELEMENT (CONTROL)
	----------------------------------------

	First, you would need to declare the textbox on the .aspx page. Here is the syntax:
		
		-
		
		<asp:Textbox ID="myTextbox" runat="server" CssClass="aTextBox"></asp:Textbox>

		-

		-Note some differences:
			-all asp controls begin with the prefix asp: - this makes them easy to find with intellisense
			-The syntax is case sensitive, whereas it isn't with html
			-the property 'runat="server"' is needed on pretty much every control. I'm pretty sure this tells 
			the app to process the control at the server... Not sure why it's needed because i feel like it would
			be assumed, but it's needed nonetheless.

		Many of these properties are put directly into the html, such as "CssClass", which will show up as the "class"
		in the resulting html. 
		
		Others are not... the ID will likely be different, so keep that in mind when altering these controls with JavaScript.
		The easiest workaround for this is to add the property ClientIDMode="static", which will force IIS to keep the ID the
		same when converting the control to html.
		 
		Syntax: <asp:Textbox ID="myTextbox" runat="server" ClientIDMode="static"></asp:Textbox>

	--------------------------------------------------------------------------------------
	REFERING TO CONTROL FROM CODE BEHIND
	-------------------------------------
	
	Now that the Textbox has been declared, you can refer to it in your code behind files

	Example:
		
		-
		
		myTextbox.Text = "hellz yeah";

		-
	----------------------------------------------------------------------------------------
	INTRODUCTION TO EVENTS
	--------------------------

	Like in Windows Forms applications, the Web Forms apps are EVENT DRIVEN. Meaning, controls have events, events trigger code.
	Unlike Windows Forms apps, an event results in a Postback. A Postback entails the client POSTing data to the server, and
	awaiting a response. This means the page is reloaded by the client each time an event is fired. Handling postbacks leads to some intricacies 
	that we will discuss later.

	Event's follow very similar syntax to Windows Forms apps. Take the page load event, for example.
		
		-

		protected void Page_Load(object sender, EventArgs e)
		{
		}

		-
	
	Now, while the syntax is similar, some of the functionality is not. 
	
	This is one of the intricacies of handling postbacks. The page load event will execute on EVERY postback. Meaning, if you click a button that 
	fires an event, the Page_Load method will fire again BEFORE the button_click event. You can get a little more information on the different 
	events and their execution orders by googling 'ASP.Net Web Forms event lifecycle'.

	Now, this isn't the end of the world: we can handle it. Take a look at this syntax:

		-

		protected void Page_Load(object sender, EventArgs e)
		{
			if (!this.IsPostBack)
			{
				//do code the FIRST TIME
			}
			else
			{
				//do code EVERY OTHER TIME
			}
			//do code EVERY TIME
		}

		-
	Now, with a simple flow control statement, we've overcome this difference. While these aren't hard to solve, they can prove perplexing if
	you have never encountered these issues. Let's analyze this syntax.

		-

		protected void Page_Load(object sender, EventArgs e)
		{
			if (!this.IsPostBack) //if this is NOT a postback
			{
				//do code the FIRST TIME
			}
			else //if this IS a postback
			{
				//do code EVERY OTHER TIME
			}

			//doesnt matter if it IS or ISN'T a postback

			//do code EVERY TIME
		}

		-
	This will only really effect the page_load event, but you will almost certainly find it useful in creating your application.

	Now, what about other events. Let's revisit the syntax on the .asp page. First, we need to create a new element

		-

		<!-- create a button object with an event -->
		<asp:Button ID="myButton" runat="server" OnClick="myButton_Click" Text="Click Me" />

		-

	You will notice that you have the option to <Create New Event> through intellisense when you add the OnClick event.
	As a result, your code behind file (.aspx.cs) will have a new event created automatically

		-

		//button click even, if you used intellisense this will have been generated by the code
		
		protected void myButton_Click(object sender, EventArgs e)
		{
			//do code on button click
		}

		-
	
	To summarize, asp controls can have events that execute on a pages postback. Certain page events execute each time
	a postback occurs, such as Page_Load. However, we can limit how our code executes by adding flow control statements.

	----------------------------------------------------------------------------------------
	MORE ABOUT POSTBACKS
	----------------------

	I can't really stress enough that postbacks are really the major difference here. Intellisense makes it relatively easy
	to put objects on a page and CSS and JavaScript work basically the same as in php: add references in the <head> element 
	and refer to your objects like you normally would. Events are very reminiscend of Windows Forms applications, so really
	this should feel pretty familiar to you by now.

	Postbacks can have a few other implications though. In particular, you may try to declare a class level variable in your
	code behind file and realize that it keeps disappearing. This is due to how Sessions are managed. Because the web is stateless,
	your variables are not preserved in between postbacks. So, it is necessary to 'save' in the Session object so that you can refer
	to them throughout your pages lifecycle. 

	Now, the easiest way to do this is to use properties instead of normal variables. Recall your OOD lessons. Properties are used
	as a means of encapsulating variables; getting and setting their values, while controlling their use and hiding complexity.
	So if you use these to save their values to the session and retrieve them, it allows you to refer to them as normal variables.
	Lets walk through that syntax:

		-
		//declare boolean

		private bool IsAwesome
		{
			get //get property
			{
				// retrieve value from session, cast it as a boolean, and return it

				return (bool) Session["isAwesome"];
			}
			set
			{
				// store value supplied in Session, effectively saving it

				Session["isAwesome"] = value;
			}
		}

		-
	Now, if we refer to our new variable in an event, it is effectively encapsulated and 'feels' like a normal class variable. In addition,
	the value will be preserved throughout postbacks, and even in between pages.

		-

		protected void myButton_Click(object sender, EventArgs e)
		{
			//check value of IsAwesome
			if (IsAwesome)
				Response.Write("You are awesome!"); //write string to page as plain text (can be useful, but asp:Literal is a better option)
		}

		-
	-------------------------------------------------
	Final thoughts
	---------------

	This is really all you need to get started with asp.net. If you know the basic process, you can google most syntax needed to accomplish what you need.
	Having quite a bit of experience in c#, I prefer this over php because it seems easier to get a solution out quickly. Also, you get to use Visual Studio, which
	has a lot of useful debuggin tools and a great intellisense to help you along the way. I believe your web service deals with XML, so you will likely find it much 
	easier to deal with the return data using c# libraries and objects. I will get into that a little in the coming section.

	--------------------------------------------------
	Web Services
	----------------

	Now, this is a little more complicated. I chose to outline how to do this in c# and asp.net, just because I would recommend it since you are dealing with XML and
	likely datatables. This will probably be much easier in asp.net, since this is all build in functionality. The only add in you would need is an XML serializer, which
	basically converts XML datasets into custom objects so that you can use OOD concepts to refer to them.

	Your web service uses SOAP, which is also pretty automated in C#. Basically, you start by importing a WSDL as a service reference. To do this, you will need to be rhosting
	the web service project. You can do this with Visual Studio and IIS express, but it will be a pain. I have already noticed some issues with configuration, such as a missing
	connection string in the Web.config file. I am not sure if you have a server hosting the service and databases, but if not you should talk to your client about getting that 
	worked out, as it will have to happen eventually anyways.

	Whether it is hosted on IIS express or an actual server, the link should be as follows. This is assuming the Web Service is the 'WS_ZooPhy' project included in the folder (looked like it to me)

		http://[server]:[port]/Service1.asmx?WSDL

		EG (IIS Express in VS)

		http://localhost:49773/Service1.asmx?WSDL

	Once you have that, you can import it as a Service Reference:
		
		Right Click on Project > Add Service Reference

		Note: If you are using the localhost version, you MUST be running the web service on IIS Express.

	This will make the library available to you as if it were a normal .cs file. 

	Now, pluck away at the different methods. You can have a look at some of the examples I have included in the Default.aspx page in this project.

	I wish I had more insight into using XML, but the web services I have experience in either used JSON or didn't really return anything. You will have the best
	luck by storing the response as a string and using an API of some sort. I would look for an XML Serializer that is free for open source use and give it a shot.
	This will require you to look at the XML being returned from an OOD standpoint: what properties do they have? Define objects as we learned in CIS 340 and 345,
	and let the serializer create the instances for you. 

	For testing, I would HIGHLY recommend using SOAP UI: It is much easier to make a handful of calls very quickly and see exactly what they return.
	It is essentially an application that allow you to supply raw XML to the web service and see the XML being returned. It will help you in finding the values
	desired by the web service, and designing objects to store the XML data that is returned.


	-------------------------------------------------------------
	Example
	-------------------
	Have a look at the example I have provided. It will demonstrate a few other features, give you some examples, and walk you through making a web service call.

	Also note that there is included in the demonstration a Master Page file, Site1.Master. It is essentially a web form, but it can inherit other pages.
	There are comments on the file that outline exactly how that works and how to impelement it. Note also that it adds some complexity to the Event Lifecycle we
	discussed earlier. Again, you can google 'Asp.net web forms event lifecycle' to get more info on the order in which events execute and what they are used for.

	I wish I had more insight into the specifics, but I hope this helps nonetheless. 
		

